name: Fire-Fighter CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Fire-Fighter Code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set up Node.js 22
      uses: actions/setup-node@v4
      with:
        node-version: '22'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Cache Node.js dependencies
      uses: actions/cache@v4
      with:
        path: FF-Angular/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('FF-Angular/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-

    - name: Cache Cypress binary
      uses: actions/cache@v4
      with:
        path: ~/.cache/Cypress
        key: ${{ runner.os }}-cypress-${{ hashFiles('FF-Angular/package-lock.json') }}
        restore-keys: ${{ runner.os }}-cypress-

    - name: Install Backend Dependencies
      working-directory: FF-API
      run: mvn clean compile -DskipTests=true

    - name: Install Frontend Dependencies
      working-directory: FF-Angular
      run: |
        npm install
        # Install Cypress binary if not cached
        npx cypress install

    - name: Create Firebase Service Account File
      working-directory: FF-API/src/main/resources
      run: echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}' > firebase-service-account.json

    - name: Run Backend Unit Tests
      working-directory: FF-API
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_SSL_MODE: ${{ secrets.DB_SSL_MODE }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        GMAIL_USERNAME: ${{ secrets.GMAIL_USERNAME }}
        GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
        GMAIL_SENDER_NAME: ${{ secrets.GMAIL_SENDER_NAME }}
        GOOGLE_GEMINI_API_KEY: ${{ secrets.GOOGLE_GEMINI_API_KEY }}
      run: mvn -Dtest=com.apex.firefighter.unit.**.*Test test -Dspring.profiles.active=test

    - name: Run Backend Integration Tests
      working-directory: FF-API
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_SSL_MODE: ${{ secrets.DB_SSL_MODE }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        GMAIL_USERNAME: ${{ secrets.GMAIL_USERNAME }}
        GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
        GMAIL_SENDER_NAME: ${{ secrets.GMAIL_SENDER_NAME }}
        GOOGLE_GEMINI_API_KEY: ${{ secrets.GOOGLE_GEMINI_API_KEY }}
      run: mvn -Dtest=com.apex.firefighter.integration.**.*Test test -Dspring.profiles.active=test

    - name: Run Frontend Unit Tests
      working-directory: FF-Angular
      run: npm test -- --watch=false --browsers=ChromeHeadless

    - name: Run E2E Tests
      working-directory: FF-Angular
      run: |
        echo "üîß Setting up E2E testing environment..."

        # Verify Chrome is available (GitHub Actions has Chrome pre-installed)
        if command -v google-chrome &> /dev/null; then
          echo "‚úÖ Google Chrome is available"
        else
          echo "‚ùå Chrome not found"
          exit 1
        fi

        echo "üöÄ Starting Angular development server for E2E tests..."

        # Start Angular dev server in background
        npm start &
        SERVER_PID=$!
        echo "Started Angular server with PID: $SERVER_PID"

        # Wait for server to be ready
        echo "‚è≥ Waiting for server to be ready..."
        for i in {1..60}; do
          if curl -f http://localhost:4200 >/dev/null 2>&1; then
            echo "‚úÖ Server is ready at http://localhost:4200"
            break
          fi
          echo "Attempt $i/60: Waiting for server..."
          sleep 3
        done

        # Final check
        if ! curl -f http://localhost:4200 >/dev/null 2>&1; then
          echo "‚ùå Server failed to start"
          kill $SERVER_PID || true
          exit 1
        fi

        # Run E2E tests
        echo "üß™ Running E2E tests..."
        npm run e2e:headless

        # Cleanup
        echo "üßπ Cleaning up..."
        kill $SERVER_PID || true

    - name: Upload E2E Test Artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-test-results
        path: |
          FF-Angular/cypress/screenshots/
          FF-Angular/cypress/videos/
        retention-days: 7

    - name: Build Backend
      working-directory: FF-API
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_SSL_MODE: ${{ secrets.DB_SSL_MODE }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        GMAIL_USERNAME: ${{ secrets.GMAIL_USERNAME }}
        GMAIL_APP_PASSWORD: ${{ secrets.GMAIL_APP_PASSWORD }}
        GMAIL_SENDER_NAME: ${{ secrets.GMAIL_SENDER_NAME }}
        GOOGLE_GEMINI_API_KEY: ${{ secrets.GOOGLE_GEMINI_API_KEY }}
      run: mvn package -DskipTests=true

    - name: Build Frontend
      working-directory: FF-Angular
      run: npx ng build

    - name: Upload Backend Artifact
      uses: actions/upload-artifact@v4
      with:
        name: firefighter-backend
        path: FF-API/target/firefighter-platform-0.0.1-SNAPSHOT.jar

    - name: Upload Frontend Artifact
      uses: actions/upload-artifact@v4
      with:
        name: firefighter-frontend
        path: FF-Angular/www/

    - name: Clean up Firebase Service Account File
      if: always()
      working-directory: FF-API/src/main/resources
      run: rm -f firebase-service-account.json
