{
	"info": {
		"_postman_id": "ticket-service-collection",
		"name": "FireFighter - Ticket Service API",
		"description": "Complete collection for testing TicketService functionality including CRUD operations, verification, and validation endpoints.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "CREATE Operations",
			"item": [
				{
					"name": "Create New Ticket",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ticketId\": \"JIRA-123\",\n    \"description\": \"Test ticket for API testing\",\n    \"valid\": true,\n    \"createdBy\": \"test-user\",\n    \"userId\": \"user1\",\n    \"emergencyType\": \"critical-system-failure\",\n    \"emergencyContact\": \"12345\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/tickets",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tickets"
							]
						},
						"description": "Creates a new ticket with the specified properties. Returns the created ticket object."
					},
					"response": []
				},
				{
					"name": "Create Invalid Ticket",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ticketId\": \"JIRA-456\",\n    \"description\": \"Invalid ticket for testing\",\n    \"valid\": false,\n    \"createdBy\": \"test-user\",\n    \"userId\": \"user2\",\n    \"emergencyType\": \"network-outage\",\n    \"emergencyContact\": \"67890\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/tickets",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tickets"
							]
						},
						"description": "Creates a new ticket marked as invalid for testing validation scenarios."
					},
					"response": []
				},
				{
					"name": "Create Duplicate Ticket (Error Test)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ticketId\": \"JIRA-123\",\n    \"description\": \"Duplicate ticket test\",\n    \"valid\": true,\n    \"createdBy\": \"test-user\",\n    \"userId\": \"user1\",\n    \"emergencyType\": \"critical-system-failure\",\n    \"emergencyContact\": \"12345\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/tickets",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tickets"
							]
						},
						"description": "Attempts to create a ticket with an existing ticketId to test error handling."
					},
					"response": []
				}
			],
			"description": "Endpoints for creating new tickets with various scenarios."
		},
		{
			"name": "READ Operations",
			"item": [
				{
					"name": "Get All Tickets",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/tickets",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tickets"
							]
						},
						"description": "Retrieves all tickets from the database. Returns an array of ticket objects."
					},
					"response": []
				},
				{
					"name": "Get Ticket by Database ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/tickets/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tickets",
								"1"
							]
						},
						"description": "Retrieves a specific ticket by its database ID. Returns 404 if not found."
					},
					"response": []
				},
				{
					"name": "Get Ticket by Ticket ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/tickets/ticket-id/JIRA-123",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tickets",
								"ticket-id",
								"JIRA-123"
							]
						},
						"description": "Retrieves a specific ticket by its ticket ID. Returns 404 if not found."
					},
					"response": []
				},
				{
					"name": "Get Non-existent Ticket (Error Test)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/tickets/ticket-id/NON-EXISTENT",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tickets",
								"ticket-id",
								"NON-EXISTENT"
							]
						},
						"description": "Attempts to retrieve a non-existent ticket to test 404 error handling."
					},
					"response": []
				}
			],
			"description": "Endpoints for retrieving tickets with various query methods."
		},
		{
			"name": "UPDATE Operations",
			"item": [
				{
					"name": "Update Existing Ticket",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"Updated ticket description\",\n    \"valid\": false,\n    \"status\": \"Completed\",\n    \"emergencyType\": \"security-incident\",\n    \"emergencyContact\": \"09876\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/tickets/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tickets",
								"1"
							]
						},
						"description": "Updates an existing ticket by its database ID. All fields are optional."
					},
					"response": []
				},
				{
					"name": "Update Non-existent Ticket (Error Test)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"This should fail\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/tickets/999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tickets",
								"999"
							]
						},
						"description": "Attempts to update a non-existent ticket to test 404 error handling."
					},
					"response": []
				}
			],
			"description": "Endpoints for updating ticket properties."
		},
		{
			"name": "DELETE Operations",
			"item": [
				{
					"name": "Delete Ticket by Database ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/tickets/1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tickets",
								"1"
							]
						},
						"description": "Deletes a ticket by its database ID. Returns 200 if successful, 404 if not found."
					},
					"response": []
				},
				{
					"name": "Delete Ticket by Ticket ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/tickets/ticket-id/JIRA-456",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tickets",
								"ticket-id",
								"JIRA-456"
							]
						},
						"description": "Deletes a ticket by its ticket ID. Returns 200 if successful, 404 if not found."
					},
					"response": []
				},
				{
					"name": "Delete Non-existent Ticket (Error Test)",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/tickets/ticket-id/NON-EXISTENT",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tickets",
								"ticket-id",
								"NON-EXISTENT"
							]
						},
						"description": "Attempts to delete a non-existent ticket to test error handling."
					},
					"response": []
				}
			],
			"description": "Endpoints for deleting tickets by different identifiers."
		},
		{
			"name": "VERIFICATION Operations",
			"item": [
				{
					"name": "Verify Valid Ticket",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/tickets/JIRA-123/verify",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tickets",
								"JIRA-123",
								"verify"
							]
						},
						"description": "Verifies a valid ticket. Increments verification count and updates last verified timestamp. Returns verification details."
					},
					"response": []
				},
				{
					"name": "Verify Invalid Ticket",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/tickets/JIRA-456/verify",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tickets",
								"JIRA-456",
								"verify"
							]
						},
						"description": "Verifies an invalid ticket. Still increments verification count but returns valid=false."
					},
					"response": []
				},
				{
					"name": "Verify Non-existent Ticket (Error Test)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/tickets/NON-EXISTENT/verify",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tickets",
								"NON-EXISTENT",
								"verify"
							]
						},
						"description": "Attempts to verify a non-existent ticket to test error handling."
					},
					"response": []
				}
			],
			"description": "Endpoints for ticket verification functionality."
		},
		{
			"name": "Test Scenarios",
			"item": [
				{
					"name": "Complete Ticket Lifecycle",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/tickets",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tickets"
							]
						},
						"description": "Use this to check the current state of all tickets after running the lifecycle tests:\n\n1. Create New Ticket\n2. Get All Tickets (verify creation)\n3. Update Ticket Description\n4. Update Ticket Validity\n5. Verify Ticket\n6. Delete Ticket\n7. Get All Tickets (verify deletion)"
					},
					"response": []
				},
				{
					"name": "Bulk Operations Test",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/tickets",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tickets"
							]
						},
						"description": "Use this to verify bulk operations:\n\n1. Create multiple tickets with different IDs\n2. Get All Tickets (verify all created)\n3. Update multiple tickets\n4. Verify multiple tickets\n5. Delete multiple tickets\n6. Get All Tickets (verify all deleted)"
					},
					"response": []
				}
			],
			"description": "Predefined test scenarios for comprehensive testing."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Pre-request script to set up test data if needed",
					"console.log('Starting request to: ' + pm.request.url);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Test script to validate responses",
					"pm.test('Status code is 200 or 404', function () {",
					"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 404]);",
					"});",
					"",
					"pm.test('Response time is less than 2000ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);",
					"});",
					"",
					"pm.test('Response has required headers', function () {",
					"    pm.response.to.have.header('Content-Type');",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		}
	]
} 