{
	"info": {
		"_postman_id": "notification-api-collection",
		"name": "FireFighter Notification API",
		"description": "Comprehensive collection for testing the FireFighter Notification Service API endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "test-user-123",
			"type": "string"
		},
		{
			"key": "notificationId",
			"value": "1",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "Get All Notifications",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Each notification has required fields\", function () {",
							"    const notifications = pm.response.json();",
							"    if (notifications.length > 0) {",
							"        const notification = notifications[0];",
							"        pm.expect(notification).to.have.property('id');",
							"        pm.expect(notification).to.have.property('userId');",
							"        pm.expect(notification).to.have.property('type');",
							"        pm.expect(notification).to.have.property('title');",
							"        pm.expect(notification).to.have.property('message');",
							"        pm.expect(notification).to.have.property('timestamp');",
							"        pm.expect(notification).to.have.property('read');",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/notifications?userId={{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"notifications"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				},
				"description": "Retrieve all notifications for a specific user, ordered by timestamp descending"
			}
		},
		{
			"name": "Get Unread Notifications",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"All notifications are unread\", function () {",
							"    const notifications = pm.response.json();",
							"    notifications.forEach(function(notification) {",
							"        pm.expect(notification.read).to.be.false;",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/notifications/unread?userId={{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"notifications",
						"unread"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				},
				"description": "Retrieve only unread notifications for a specific user"
			}
		},
		{
			"name": "Get Notification Statistics",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has statistics fields\", function () {",
							"    const stats = pm.response.json();",
							"    pm.expect(stats).to.have.property('total');",
							"    pm.expect(stats).to.have.property('unread');",
							"    pm.expect(stats).to.have.property('read');",
							"    pm.expect(stats.total).to.be.a('number');",
							"    pm.expect(stats.unread).to.be.a('number');",
							"    pm.expect(stats.read).to.be.a('number');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/notifications/stats?userId={{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"notifications",
						"stats"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				},
				"description": "Get notification statistics (total, unread, read counts) for a user"
			}
		},
		{
			"name": "Get Specific Notification",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 404\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Notification has correct structure\", function () {",
							"        const notification = pm.response.json();",
							"        pm.expect(notification).to.have.property('id');",
							"        pm.expect(notification).to.have.property('userId');",
							"        pm.expect(notification.userId).to.equal(pm.collectionVariables.get('userId'));",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/notifications/{{notificationId}}?userId={{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"notifications",
						"{{notificationId}}"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				},
				"description": "Retrieve a specific notification by ID for a user"
			}
		},
		{
			"name": "Mark Notification as Read",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 404\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Response indicates success\", function () {",
							"        const response = pm.response.json();",
							"        pm.expect(response.success).to.be.true;",
							"        pm.expect(response.message).to.include('marked as read');",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/notifications/{{notificationId}}/read?userId={{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"notifications",
						"{{notificationId}}",
						"read"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				},
				"description": "Mark a specific notification as read"
			}
		},
		{
			"name": "Mark All Notifications as Read",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response indicates success\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    pm.expect(response.message).to.include('All notifications marked as read');",
							"    pm.expect(response).to.have.property('updatedCount');",
							"    pm.expect(response.updatedCount).to.be.a('number');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/notifications/read-all?userId={{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"notifications",
						"read-all"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				},
				"description": "Mark all unread notifications as read for a user"
			}
		},
		{
			"name": "Delete Specific Notification",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 404\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Response indicates success\", function () {",
							"        const response = pm.response.json();",
							"        pm.expect(response.success).to.be.true;",
							"        pm.expect(response.message).to.include('deleted successfully');",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/notifications/{{notificationId}}?userId={{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"notifications",
						"{{notificationId}}"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				},
				"description": "Delete a specific notification"
			}
		},
		{
			"name": "Delete All Read Notifications",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response indicates success\", function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    pm.expect(response.message).to.include('deleted successfully');",
							"    pm.expect(response).to.have.property('deletedCount');",
							"    pm.expect(response.deletedCount).to.be.a('number');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/notifications/read?userId={{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"notifications",
						"read"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				},
				"description": "Delete all read notifications for a user"
			}
		}
	]
}
