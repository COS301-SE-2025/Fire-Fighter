{
  "version": 3,
  "sources": ["../../../../../../node_modules/@capacitor-firebase/authentication/dist/esm/web.js"],
  "sourcesContent": ["import { WebPlugin } from '@capacitor/core';\nimport { EmailAuthProvider, FacebookAuthProvider, GithubAuthProvider, GoogleAuthProvider, OAuthCredential, OAuthProvider, RecaptchaVerifier, TwitterAuthProvider, applyActionCode, browserLocalPersistence, browserSessionPersistence, confirmPasswordReset, connectAuthEmulator, createUserWithEmailAndPassword, deleteUser, fetchSignInMethodsForEmail, getAdditionalUserInfo, getAuth, getRedirectResult, inMemoryPersistence, indexedDBLocalPersistence, isSignInWithEmailLink, linkWithCredential, linkWithPhoneNumber, linkWithPopup, linkWithRedirect, reload, revokeAccessToken, sendEmailVerification, sendPasswordResetEmail, sendSignInLinkToEmail, setPersistence, signInAnonymously, signInWithCustomToken, signInWithEmailAndPassword, signInWithEmailLink, signInWithPhoneNumber, signInWithPopup, signInWithRedirect, unlink, updateEmail, updatePassword, updateProfile, verifyBeforeUpdateEmail } from 'firebase/auth';\nimport { Persistence, ProviderId } from './definitions';\nexport class FirebaseAuthenticationWeb extends WebPlugin {\n  constructor() {\n    super();\n    this.lastConfirmationResult = new Map();\n    const auth = getAuth();\n    auth.onAuthStateChanged(user => this.handleAuthStateChange(user));\n    auth.onIdTokenChanged(user => void this.handleIdTokenChange(user));\n  }\n  async applyActionCode(options) {\n    const auth = getAuth();\n    return applyActionCode(auth, options.oobCode);\n  }\n  async createUserWithEmailAndPassword(options) {\n    const auth = getAuth();\n    const userCredential = await createUserWithEmailAndPassword(auth, options.email, options.password);\n    return this.createSignInResult(userCredential, null);\n  }\n  async confirmPasswordReset(options) {\n    const auth = getAuth();\n    return confirmPasswordReset(auth, options.oobCode, options.newPassword);\n  }\n  async confirmVerificationCode(options) {\n    const {\n      verificationCode,\n      verificationId\n    } = options;\n    const confirmationResult = this.lastConfirmationResult.get(verificationId);\n    if (!confirmationResult) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_CONFIRMATION_RESULT_MISSING);\n    }\n    const userCredential = await confirmationResult.confirm(verificationCode);\n    return this.createSignInResult(userCredential, null);\n  }\n  async deleteUser() {\n    const auth = getAuth();\n    const currentUser = auth.currentUser;\n    if (!currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    return deleteUser(currentUser);\n  }\n  async fetchSignInMethodsForEmail(options) {\n    const auth = getAuth();\n    const signInMethods = await fetchSignInMethodsForEmail(auth, options.email);\n    return {\n      signInMethods\n    };\n  }\n  async getPendingAuthResult() {\n    this.throwNotAvailableError();\n  }\n  async getCurrentUser() {\n    const auth = getAuth();\n    const userResult = this.createUserResult(auth.currentUser);\n    const result = {\n      user: userResult\n    };\n    return result;\n  }\n  async getIdToken(options) {\n    const auth = getAuth();\n    if (!auth.currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    const idToken = await auth.currentUser.getIdToken(options === null || options === void 0 ? void 0 : options.forceRefresh);\n    const result = {\n      token: idToken || ''\n    };\n    return result;\n  }\n  async getRedirectResult() {\n    const auth = getAuth();\n    const userCredential = await getRedirectResult(auth);\n    const authCredential = userCredential ? OAuthProvider.credentialFromResult(userCredential) : null;\n    return this.createSignInResult(userCredential, authCredential);\n  }\n  async getTenantId() {\n    const auth = getAuth();\n    return {\n      tenantId: auth.tenantId\n    };\n  }\n  async isSignInWithEmailLink(options) {\n    const auth = getAuth();\n    return {\n      isSignInWithEmailLink: isSignInWithEmailLink(auth, options.emailLink)\n    };\n  }\n  async linkWithApple(options) {\n    const provider = new OAuthProvider(ProviderId.APPLE);\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await this.linkCurrentUserWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n    const authCredential = OAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n  async linkWithEmailAndPassword(options) {\n    const authCredential = EmailAuthProvider.credential(options.email, options.password);\n    const userCredential = await this.linkCurrentUserWithCredential(authCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n  async linkWithEmailLink(options) {\n    const authCredential = EmailAuthProvider.credentialWithLink(options.email, options.emailLink);\n    const userCredential = await this.linkCurrentUserWithCredential(authCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n  async linkWithFacebook(options) {\n    const provider = new FacebookAuthProvider();\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await this.linkCurrentUserWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n    const authCredential = FacebookAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n  async linkWithGameCenter() {\n    this.throwNotAvailableError();\n  }\n  async linkWithGithub(options) {\n    const provider = new GithubAuthProvider();\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await this.linkCurrentUserWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n    const authCredential = GithubAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n  async linkWithGoogle(options) {\n    const provider = new GoogleAuthProvider();\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await this.linkCurrentUserWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n    const authCredential = GoogleAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n  async linkWithMicrosoft(options) {\n    const provider = new OAuthProvider(ProviderId.MICROSOFT);\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await this.linkCurrentUserWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n    const authCredential = OAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n  async linkWithOpenIdConnect(options) {\n    const provider = new OAuthProvider(options.providerId);\n    this.applySignInOptions(options, provider);\n    const userCredential = await this.linkCurrentUserWithPopupOrRedirect(provider, options.mode);\n    const authCredential = OAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n  async linkWithPhoneNumber(options) {\n    const auth = getAuth();\n    const currentUser = auth.currentUser;\n    if (!currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    if (!options.phoneNumber) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_PHONE_NUMBER_MISSING);\n    }\n    if (!options.recaptchaVerifier || !(options.recaptchaVerifier instanceof RecaptchaVerifier)) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_RECAPTCHA_VERIFIER_MISSING);\n    }\n    try {\n      const confirmationResult = await linkWithPhoneNumber(currentUser, options.phoneNumber, options.recaptchaVerifier);\n      const {\n        verificationId\n      } = confirmationResult;\n      this.lastConfirmationResult.set(verificationId, confirmationResult);\n      const event = {\n        verificationId\n      };\n      this.notifyListeners(FirebaseAuthenticationWeb.PHONE_CODE_SENT_EVENT, event);\n    } catch (error) {\n      const event = {\n        message: this.getErrorMessage(error)\n      };\n      this.notifyListeners(FirebaseAuthenticationWeb.PHONE_VERIFICATION_FAILED_EVENT, event);\n    }\n  }\n  async linkWithPlayGames() {\n    this.throwNotAvailableError();\n  }\n  async linkWithTwitter(options) {\n    const provider = new TwitterAuthProvider();\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await this.linkCurrentUserWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n    const authCredential = TwitterAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n  async linkWithYahoo(options) {\n    const provider = new OAuthProvider(ProviderId.YAHOO);\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await this.linkCurrentUserWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n    const authCredential = OAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n  async reload() {\n    const auth = getAuth();\n    const currentUser = auth.currentUser;\n    if (!currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    return reload(currentUser);\n  }\n  async revokeAccessToken(options) {\n    const auth = getAuth();\n    return revokeAccessToken(auth, options.token);\n  }\n  async sendEmailVerification(options) {\n    const auth = getAuth();\n    const currentUser = auth.currentUser;\n    if (!currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    return sendEmailVerification(currentUser, options === null || options === void 0 ? void 0 : options.actionCodeSettings);\n  }\n  async sendPasswordResetEmail(options) {\n    const auth = getAuth();\n    return sendPasswordResetEmail(auth, options.email, options.actionCodeSettings);\n  }\n  async sendSignInLinkToEmail(options) {\n    const auth = getAuth();\n    return sendSignInLinkToEmail(auth, options.email, options.actionCodeSettings);\n  }\n  async setLanguageCode(options) {\n    const auth = getAuth();\n    auth.languageCode = options.languageCode;\n  }\n  async setPersistence(options) {\n    const auth = getAuth();\n    switch (options.persistence) {\n      case Persistence.BrowserLocal:\n        await setPersistence(auth, browserLocalPersistence);\n        break;\n      case Persistence.BrowserSession:\n        await setPersistence(auth, browserSessionPersistence);\n        break;\n      case Persistence.IndexedDbLocal:\n        await setPersistence(auth, indexedDBLocalPersistence);\n        break;\n      case Persistence.InMemory:\n        await setPersistence(auth, inMemoryPersistence);\n        break;\n    }\n  }\n  async setTenantId(options) {\n    const auth = getAuth();\n    auth.tenantId = options.tenantId;\n  }\n  async signInAnonymously() {\n    const auth = getAuth();\n    const userCredential = await signInAnonymously(auth);\n    return this.createSignInResult(userCredential, null);\n  }\n  async signInWithApple(options) {\n    const provider = new OAuthProvider(ProviderId.APPLE);\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await this.signInWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n    const authCredential = OAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n  async signInWithCustomToken(options) {\n    const auth = getAuth();\n    const userCredential = await signInWithCustomToken(auth, options.token);\n    return this.createSignInResult(userCredential, null);\n  }\n  async signInWithEmailAndPassword(options) {\n    const auth = getAuth();\n    const userCredential = await signInWithEmailAndPassword(auth, options.email, options.password);\n    return this.createSignInResult(userCredential, null);\n  }\n  async signInWithEmailLink(options) {\n    const auth = getAuth();\n    const userCredential = await signInWithEmailLink(auth, options.email, options.emailLink);\n    return this.createSignInResult(userCredential, null);\n  }\n  async signInWithFacebook(options) {\n    const provider = new FacebookAuthProvider();\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await this.signInWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n    const authCredential = FacebookAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n  async signInWithGithub(options) {\n    const provider = new GithubAuthProvider();\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await this.signInWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n    const authCredential = GithubAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n  async signInWithGoogle(options) {\n    const provider = new GoogleAuthProvider();\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await this.signInWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n    const authCredential = GoogleAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n  async signInWithMicrosoft(options) {\n    const provider = new OAuthProvider(ProviderId.MICROSOFT);\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await this.signInWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n    const authCredential = OAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n  async signInWithOpenIdConnect(options) {\n    const provider = new OAuthProvider(options.providerId);\n    this.applySignInOptions(options, provider);\n    const userCredential = await this.signInWithPopupOrRedirect(provider, options.mode);\n    const authCredential = OAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n  async signInWithPhoneNumber(options) {\n    if (!options.phoneNumber) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_PHONE_NUMBER_MISSING);\n    }\n    if (!options.recaptchaVerifier || !(options.recaptchaVerifier instanceof RecaptchaVerifier)) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_RECAPTCHA_VERIFIER_MISSING);\n    }\n    const auth = getAuth();\n    try {\n      const confirmationResult = await signInWithPhoneNumber(auth, options.phoneNumber, options.recaptchaVerifier);\n      const {\n        verificationId\n      } = confirmationResult;\n      this.lastConfirmationResult.set(verificationId, confirmationResult);\n      const event = {\n        verificationId\n      };\n      this.notifyListeners(FirebaseAuthenticationWeb.PHONE_CODE_SENT_EVENT, event);\n    } catch (error) {\n      const event = {\n        message: this.getErrorMessage(error)\n      };\n      this.notifyListeners(FirebaseAuthenticationWeb.PHONE_VERIFICATION_FAILED_EVENT, event);\n    }\n  }\n  async signInWithPlayGames() {\n    this.throwNotAvailableError();\n  }\n  async signInWithGameCenter() {\n    this.throwNotAvailableError();\n  }\n  async signInWithTwitter(options) {\n    const provider = new TwitterAuthProvider();\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await this.signInWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n    const authCredential = TwitterAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n  async signInWithYahoo(options) {\n    const provider = new OAuthProvider(ProviderId.YAHOO);\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await this.signInWithPopupOrRedirect(provider, options === null || options === void 0 ? void 0 : options.mode);\n    const authCredential = OAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n  async signOut() {\n    const auth = getAuth();\n    await auth.signOut();\n  }\n  async unlink(options) {\n    const auth = getAuth();\n    if (!auth.currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    const user = await unlink(auth.currentUser, options.providerId);\n    const userResult = this.createUserResult(user);\n    const result = {\n      user: userResult\n    };\n    return result;\n  }\n  async updateEmail(options) {\n    const auth = getAuth();\n    const currentUser = auth.currentUser;\n    if (!currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    return updateEmail(currentUser, options.newEmail);\n  }\n  async updatePassword(options) {\n    const auth = getAuth();\n    const currentUser = auth.currentUser;\n    if (!currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    return updatePassword(currentUser, options.newPassword);\n  }\n  async updateProfile(options) {\n    const auth = getAuth();\n    const currentUser = auth.currentUser;\n    if (!currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    return updateProfile(currentUser, {\n      displayName: options.displayName,\n      photoURL: options.photoUrl\n    });\n  }\n  async useAppLanguage() {\n    const auth = getAuth();\n    auth.useDeviceLanguage();\n  }\n  async useEmulator(options) {\n    const auth = getAuth();\n    const port = options.port || 9099;\n    const scheme = options.scheme || 'http';\n    if (options.host.includes('://')) {\n      connectAuthEmulator(auth, `${options.host}:${port}`);\n    } else {\n      connectAuthEmulator(auth, `${scheme}://${options.host}:${port}`);\n    }\n  }\n  async verifyBeforeUpdateEmail(options) {\n    const auth = getAuth();\n    const currentUser = auth.currentUser;\n    if (!currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    return verifyBeforeUpdateEmail(currentUser, options === null || options === void 0 ? void 0 : options.newEmail, options === null || options === void 0 ? void 0 : options.actionCodeSettings);\n  }\n  handleAuthStateChange(user) {\n    const userResult = this.createUserResult(user);\n    const change = {\n      user: userResult\n    };\n    this.notifyListeners(FirebaseAuthenticationWeb.AUTH_STATE_CHANGE_EVENT, change, true);\n  }\n  async handleIdTokenChange(user) {\n    if (!user) {\n      return;\n    }\n    const idToken = await user.getIdToken(false);\n    const result = {\n      token: idToken\n    };\n    this.notifyListeners(FirebaseAuthenticationWeb.ID_TOKEN_CHANGE_EVENT, result, true);\n  }\n  applySignInOptions(options, provider) {\n    if (options.customParameters) {\n      const customParameters = {};\n      options.customParameters.map(parameter => {\n        customParameters[parameter.key] = parameter.value;\n      });\n      provider.setCustomParameters(customParameters);\n    }\n    if (options.scopes) {\n      for (const scope of options.scopes) {\n        provider.addScope(scope);\n      }\n    }\n  }\n  signInWithPopupOrRedirect(provider, mode) {\n    const auth = getAuth();\n    if (mode === 'redirect') {\n      return signInWithRedirect(auth, provider);\n    } else {\n      return signInWithPopup(auth, provider);\n    }\n  }\n  linkCurrentUserWithPopupOrRedirect(provider, mode) {\n    const auth = getAuth();\n    if (!auth.currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    if (mode === 'redirect') {\n      return linkWithRedirect(auth.currentUser, provider);\n    } else {\n      return linkWithPopup(auth.currentUser, provider);\n    }\n  }\n  linkCurrentUserWithCredential(credential) {\n    const auth = getAuth();\n    if (!auth.currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    return linkWithCredential(auth.currentUser, credential);\n  }\n  requestAppTrackingTransparencyPermission() {\n    this.throwNotAvailableError();\n  }\n  checkAppTrackingTransparencyPermission() {\n    this.throwNotAvailableError();\n  }\n  createSignInResult(userCredential, authCredential) {\n    const userResult = this.createUserResult((userCredential === null || userCredential === void 0 ? void 0 : userCredential.user) || null);\n    const credentialResult = this.createCredentialResult(authCredential);\n    const additionalUserInfoResult = this.createAdditionalUserInfoResult(userCredential);\n    const result = {\n      user: userResult,\n      credential: credentialResult,\n      additionalUserInfo: additionalUserInfoResult\n    };\n    return result;\n  }\n  createCredentialResult(credential) {\n    if (!credential) {\n      return null;\n    }\n    const result = {\n      providerId: credential.providerId\n    };\n    if (credential instanceof OAuthCredential) {\n      result.accessToken = credential.accessToken;\n      result.idToken = credential.idToken;\n      result.secret = credential.secret;\n    }\n    return result;\n  }\n  createUserResult(user) {\n    if (!user) {\n      return null;\n    }\n    const result = {\n      displayName: user.displayName,\n      email: user.email,\n      emailVerified: user.emailVerified,\n      isAnonymous: user.isAnonymous,\n      metadata: this.createUserMetadataResult(user.metadata),\n      phoneNumber: user.phoneNumber,\n      photoUrl: user.photoURL,\n      providerData: this.createUserProviderDataResult(user.providerData),\n      providerId: user.providerId,\n      tenantId: user.tenantId,\n      uid: user.uid\n    };\n    return result;\n  }\n  createUserMetadataResult(metadata) {\n    const result = {};\n    if (metadata.creationTime) {\n      result.creationTime = Date.parse(metadata.creationTime);\n    }\n    if (metadata.lastSignInTime) {\n      result.lastSignInTime = Date.parse(metadata.lastSignInTime);\n    }\n    return result;\n  }\n  createUserProviderDataResult(providerData) {\n    return providerData.map(data => ({\n      displayName: data.displayName,\n      email: data.email,\n      phoneNumber: data.phoneNumber,\n      photoUrl: data.photoURL,\n      providerId: data.providerId,\n      uid: data.uid\n    }));\n  }\n  createAdditionalUserInfoResult(credential) {\n    if (!credential) {\n      return null;\n    }\n    const additionalUserInfo = getAdditionalUserInfo(credential);\n    if (!additionalUserInfo) {\n      return null;\n    }\n    const {\n      isNewUser,\n      profile,\n      providerId,\n      username\n    } = additionalUserInfo;\n    const result = {\n      isNewUser\n    };\n    if (providerId !== null) {\n      result.providerId = providerId;\n    }\n    if (profile !== null) {\n      result.profile = profile;\n    }\n    if (username !== null && username !== undefined) {\n      result.username = username;\n    }\n    return result;\n  }\n  getErrorMessage(error) {\n    if (error instanceof Object && 'message' in error && typeof error['message'] === 'string') {\n      return error['message'];\n    }\n    return JSON.stringify(error);\n  }\n  throwNotAvailableError() {\n    throw new Error('Not available on web.');\n  }\n}\nFirebaseAuthenticationWeb.AUTH_STATE_CHANGE_EVENT = 'authStateChange';\nFirebaseAuthenticationWeb.ID_TOKEN_CHANGE_EVENT = 'idTokenChange';\nFirebaseAuthenticationWeb.PHONE_CODE_SENT_EVENT = 'phoneCodeSent';\nFirebaseAuthenticationWeb.PHONE_VERIFICATION_FAILED_EVENT = 'phoneVerificationFailed';\nFirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN = 'No user is signed in.';\nFirebaseAuthenticationWeb.ERROR_PHONE_NUMBER_MISSING = 'phoneNumber must be provided.';\nFirebaseAuthenticationWeb.ERROR_RECAPTCHA_VERIFIER_MISSING = 'recaptchaVerifier must be provided and must be an instance of RecaptchaVerifier.';\nFirebaseAuthenticationWeb.ERROR_CONFIRMATION_RESULT_MISSING = 'No confirmation result with this verification id was found.';\n"],
  "mappings": "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",
  "names": []
}
